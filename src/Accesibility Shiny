library(shiny)
library(leaflet)
library(sf)
library(dplyr)
library(DT)

# Load the data
access_score <- read.csv("access_score.csv")
planning_area_geojson <- st_read("planning_area.geojson")
# Clean the geometries
planning_area_geojson <- st_make_valid(planning_area_geojson)

# Define UI
ui <- fluidPage(
  titlePanel("Accessibility Analysis"),
  tabsetPanel(
    tabPanel("Accessibility",
             sidebarLayout(
               sidebarPanel(
                 sliderInput("cbdPoints", "CBD Points", min = 0, max = 1, value = 0, step = 0.1),
                 sliderInput("ionPoints", "ION Points", min = 0, max = 1, value = 0, step = 0.1),
                 sliderInput("sghPoints", "SGH Points", min = 0, max = 1, value = 0, step = 0.1),
                 actionButton("seeMap", "See the Map")
               ),
               mainPanel(
                 leafletOutput("map")
               )
             )
    ),
    tabPanel("Availability"),
    tabPanel("Accessibility Table",
             DTOutput("accessTable")  # Add a DT output for the accessibility table
    )
  )
)

# Define server logic
server <- function(input, output, session) {
  observeEvent(input$seeMap, {
    total_points <- input$cbdPoints + input$ionPoints + input$sghPoints
    
    if (total_points > 1) {
      showModal(modalDialog(
        title = "Error",
        "Total points cannot exceed one",
        easyClose = TRUE,
        footer = NULL
      ))
    } else if (total_points < 1) {
      showModal(modalDialog(
        title = "Error",
        "Total points must sum up to 1",
        easyClose = TRUE,
        footer = NULL
      ))
    } else {
      # Calculate the scores
      access_score$score <- with(access_score, input$cbdPoints * cbd_diff_score + input$ionPoints * ion_diff_score + input$sghPoints * sgh_diff_score)
      # Normalize the scores to range from 0 to 1
      access_score$normalized_score <- (access_score$score - min(access_score$score)) / (max(access_score$score) - min(access_score$score))
      
      # Merge the scores with the geojson data
      merged_data <- merge(planning_area_geojson, access_score, by = "planning_area")
      
      # Render the map with Leaflet
      output$map <- renderLeaflet({
        leaflet() %>%
          addProviderTiles("CartoDB.Positron") %>%
          addPolygons(data = merged_data,
                      fillColor = ~colorNumeric("RdYlGn", domain = merged_data$normalized_score)(normalized_score),
                      fillOpacity = 0.7,
                      color = "black",
                      weight = 1,
                      label = ~paste(planning_area, ": ", round(normalized_score, 2)),
                      labelOptions = labelOptions(direction = "auto", permanent = FALSE)) %>%
          addLegend(pal = colorNumeric("RdYlGn", domain = merged_data$normalized_score),
                    values = merged_data$normalized_score,
                    title = "Accessibility Score",
                    position = "bottomright")
      })
      
      # Render the accessibility table
      output$accessTable <- renderDT({
        sorted_access_score <- access_score %>%
          select(planning_area, cbd_diff_score, ion_diff_score, sgh_diff_score, normalized_score) %>%
          mutate(cbd_diff_score = round(cbd_diff_score, 2),
                 ion_diff_score = round(ion_diff_score, 2),
                 sgh_diff_score = round(sgh_diff_score, 2),
                 normalized_score = round(normalized_score, 2)) %>%
          arrange(desc(normalized_score))
        datatable(sorted_access_score, options = list(pageLength = 10))
      }, server = FALSE)
    }
  })
}

# Run the application
shinyApp(ui = ui, server = server)
